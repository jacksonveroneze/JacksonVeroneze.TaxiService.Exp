// <auto-generated />
using System;
using JacksonVeroneze.TemplateWebApi.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JacksonVeroneze.TemplateWebApi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231107204811_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.EmailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_email");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_email_user_id");

                    b.ToTable("email", "public");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.PhoneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_phone");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_phone_user_id");

                    b.ToTable("phone", "public");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.PositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uuid")
                        .HasColumnName("ride_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_position");

                    b.HasIndex("RideId")
                        .HasDatabaseName("ix_position_ride_id");

                    b.ToTable("position", "public");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.RideEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<decimal>("Fare")
                        .HasColumnType("numeric")
                        .HasColumnName("fare");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_ride");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_ride_driver_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ride_user_id");

                    b.ToTable("ride", "public");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActivedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actived_on_utc");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("GenderType")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("InactivedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inactived_on_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.EmailEntity", b =>
                {
                    b.HasOne("JacksonVeroneze.TemplateWebApi.Domain.Entities.UserEntity", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_user_entity_user_entity_temp_id");

                    b.OwnsOne("JacksonVeroneze.TemplateWebApi.Domain.ValueObjects.EmailValueObject", "Email", b1 =>
                        {
                            b1.Property<Guid>("EmailEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("value");

                            b1.HasKey("EmailEntityId");

                            b1.ToTable("email", "public");

                            b1.WithOwner()
                                .HasForeignKey("EmailEntityId")
                                .HasConstraintName("fk_email_email_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.PhoneEntity", b =>
                {
                    b.HasOne("JacksonVeroneze.TemplateWebApi.Domain.Entities.UserEntity", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_phone_user_entity_user_temp_id2");

                    b.OwnsOne("JacksonVeroneze.TemplateWebApi.Domain.ValueObjects.PhoneValueObject", "Phone", b1 =>
                        {
                            b1.Property<Guid>("PhoneEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("value");

                            b1.HasKey("PhoneEntityId");

                            b1.ToTable("phone", "public");

                            b1.WithOwner()
                                .HasForeignKey("PhoneEntityId")
                                .HasConstraintName("fk_phone_phone_id");
                        });

                    b.Navigation("Phone");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.PositionEntity", b =>
                {
                    b.HasOne("JacksonVeroneze.TemplateWebApi.Domain.Entities.RideEntity", "Ride")
                        .WithMany("Positions")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_position_ride_entity_ride_entity_temp_id1");

                    b.OwnsOne("JacksonVeroneze.TemplateWebApi.Domain.ValueObjects.CoordinateValueObject", "Position", b1 =>
                        {
                            b1.Property<Guid>("PositionEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("from_latitude");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("from_longitude");

                            b1.HasKey("PositionEntityId");

                            b1.ToTable("position", "public");

                            b1.WithOwner()
                                .HasForeignKey("PositionEntityId")
                                .HasConstraintName("fk_position_position_id");
                        });

                    b.Navigation("Position");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.RideEntity", b =>
                {
                    b.HasOne("JacksonVeroneze.TemplateWebApi.Domain.Entities.UserEntity", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_ride_user_entity_driver_temp_id4");

                    b.HasOne("JacksonVeroneze.TemplateWebApi.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ride_user_entity_user_temp_id3");

                    b.OwnsOne("JacksonVeroneze.TemplateWebApi.Domain.ValueObjects.CoordinateValueObject", "From", b1 =>
                        {
                            b1.Property<Guid>("RideEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("from_latitude");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("from_longitude");

                            b1.HasKey("RideEntityId");

                            b1.ToTable("ride", "public");

                            b1.WithOwner()
                                .HasForeignKey("RideEntityId")
                                .HasConstraintName("fk_ride_ride_id");
                        });

                    b.OwnsOne("JacksonVeroneze.TemplateWebApi.Domain.ValueObjects.CoordinateValueObject", "To", b1 =>
                        {
                            b1.Property<Guid>("RideEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("to_latitude");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("to_longitude");

                            b1.HasKey("RideEntityId");

                            b1.ToTable("ride", "public");

                            b1.WithOwner()
                                .HasForeignKey("RideEntityId")
                                .HasConstraintName("fk_ride_ride_id");
                        });

                    b.Navigation("Driver");

                    b.Navigation("From");

                    b.Navigation("To");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.UserEntity", b =>
                {
                    b.OwnsOne("JacksonVeroneze.TemplateWebApi.Domain.ValueObjects.CpfValueObject", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("user", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.OwnsOne("JacksonVeroneze.TemplateWebApi.Domain.ValueObjects.NameValueObject", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("user", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.RideEntity", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("JacksonVeroneze.TemplateWebApi.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
